<?php
$title = "22 ЧПУ и Паттерны проектирования";
require_once  "../templates/header.php";
?>
<h3>Паттерны: FrontController и MVC, Active Record, Singleton</h3>
<?php

/* 
PSR1 и PSR2 http://svyatoslav.biz/misc/psr_translation/#_PSR-1
либо стандарты psr: https://www.php-fig.org/psr/

PSR-1: Basic Coding Standard ( для совместимости кода )
Данный стандарт описывает элементы, являющиеся необходимыми для обеспечения технической совместимости кода, создаваемого или поддерживаемого несколькими разработчиками.

PSR-2: Coding Style Guide ( для восприятия кода, правила форматирования php кода )
Этот стандарт расширяет вешеописанный. Он призван уменьшить сложность восприятия кода, написанного разными авторами. Это достигается путём внедрения правил относительно форматирования PHP-кода.

PSR-4: Autoloader ( автозагрузка классов, неймспейсы как директории  )
Данный стандарт описывает то, как должна быть реализована автозагрузка классов – что неймспейсы должны соответствовать директориям и ещё некоторые детали.
*/

# ЧПУ(Человеко понятный url) - веб-адрес, удобный для восприятия человеком.
// https://ru.wikipedia.org/wiki/Человекопонятный_URL
# Slug - часть URL адреса, в котором в качестве идентификатора страницы используются слова, понятные человеку.

# Паттерны проектирования (desing pattern) - архитектурная конструкция, представляющая собой решение проблемы проектирования. // Идея концепция
// https://ru.wikipedia.org/wiki/Design_Patterns

/*1 FrontController:
Создаём файл .htaccess на уровне index.php  // Для Wamp
Запускаем для Wamp (для Mamp перенаправление с index.php/erfer на index.php работает) веб-сервер в меню приложения выбираем перенаправление Apache-Apache modules-rewrite_module
echo 'your request:'.$_SERVER['$REQUEST_URI'] // Получаем информацию о нашем запросе (строку запроса используя суперглобальный массив $_SERVER с определённым ключём)
*/


/*2 Паттерн MVC (Model View Controller)
Связка из 3 паттернов: модель, вид, контроллер
Предполагает разделение: данных, пользовательского интерфейса и управляющей логикой на 3 отдельных компонентов
Модификация каждого компонента может осущ. независимо, а структура кода является более предсказуемой и удобной
M-Model часть программы работающая с данными, реализует бизнес логику. Как класс у которого методы для работы с данными, выполняет манипуляции над данными
V-View (представление) отвечает за отображение информации
C-Controller обеспечивает связь между пользователем и системой, обрабатывает запрос пользователя, на основе информации из запроса получает данные из модели, а также использует представление для визуализации данных, после этого польз. получает нужную страницу

FrontController и MVC
В корне файла index.php и .htaccess и папки: controllers, models, views  // У файлов в папке controllers имена заканчиваются словом ...Controller.php У файлов в папке models навзания соответсвующие их сути. У файлов views должны в подпапках
*/


/*3
Паттерн проектирования – Active Record. 
Этот шаблон говорит о том, что сущность (объекты класса статьи или пользователя) сами должны управлять работой с базой данных.
Контроллеры знают только сущности, контроллерыне работают с базой данных
Логика бд описана в модулях!
*/


/*4
Паттерн Singleton, шаблон проектирования
Этот паттерн относится к числу порождающих паттернов проектирования, то есть тех, с помощью которых в нашей программе создаются объекты. 
Необходим, чтобы при вызове методов не создавать каждый раз объект класса к примеру Db, $db = new Db(); т.е. не установливать новое соединение с базой данных каждый раз
вместо $db = new Db(); везде пишем: $db = Db::getInstance(); + приватный конструктор private function __construct() в классе Db.php

Используем статическое свойство класса для того, чтобы хранить единственный созданный экземпляр этого класса. 
То есть в свойство класса мы положим созданный объект класса Db, а потом сможем использовать его, когда нам потребуется. 
Ведь статические свойства принадлежат классу и всем его объектам целиком и в единственном экземпляре.

Давайте создадим в классе Db статическое свойство $instance, в котором будет храниться созданный объект.

Классы, реализующие паттерн синглтон сами гарантируют, что будет использоваться только один их экземпляр – создать объекты можно только с помощью специального метода, ведь конструктор больше недоступен извне. 
А этот метод следит за тем, чтобы не было более одного созданного объекта и предоставляет единую точку доступа к этому экземпляру.
*/

?>

<?php
echo "<br>";
require_once  "../templates/rightSidebar.php";
?>