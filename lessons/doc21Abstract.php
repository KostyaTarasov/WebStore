<?php
$title = "21 Абстрактный класс и Интерфейсы";
require_once  "../templates/header.php";
?>
<?php
// Общая инфа
// Для контроля типа в параметрах функции указывается (имя класса или наследника и имя объекта от класса)
// Сигнатура метода - это имя метода, число аргументов и типы аргументов (при использ. контроля типа)
// public function hello($time,array $user){} Где hello-сигнатура, 2 аргумента, и тип аргумента второго:  массив
// public function hello(time, User $user){}  Типы аргументов: объект класса User


# Абстрактный класс - это базовый класс, объекты которого не создаются (только у наследника). Это общая сущность. Например title вместо name, дата, вместо дни рождения.
# Он содержит характеристики сущности, которые отличаются её от других сущностей.

# Абстрактный метод - это метод класса, реализация для которого отсутствует
abstract class Publication
{

    abstract public function printItem(); // Регламентируем, какие методы должны быть реализованы в классах наследниках. Иначе будет ошибка в классах наследниках (Если не написан в них printItem()) Аналогично и с параметрами в скобках

}

// class NewsPublication extends Publication // Ошибка нету метода printItem()
// {
// }

// Если класс содержит абстрактный метод, то класс должен быть абстрактным



# Интерфейс - это инструмент, который указывает какие методы должен включать класс, без необходимости описания их функционала, без реализации.

# Если мы хотим только описать работу класса потомка тогда интерфейс
# Если мы можем ещё реализовать какие-то общие методы тогда абстрактный класс

// Аналогично абстракции, наследуемый класс от интерфейса должен включать метод info() из родительского интерфейса и drive() из родительского наследуемого интерфейса



interface Vehicle
{
    public function info(); // Метод без реализации
}

// Могут наследоваться
interface Car extends Vehicle
{
    public function drive();
}

interface Boat extends Vehicle
{
    public function swim();
}

// Множественное наследование классов запрещено, но можно реализовывать несколько интерфейсов для 1 клсса
class Audi implements Car, Boat // Класс Audi реализует интерфейс Car и Boat с помощью implements // Мы обязуем класс реализовать интерфейсы Car и Boot
{
    public function info()
    {
        echo '<br> Audi info';
    }
    public function drive()
    {
        echo '<br> Audi drive';
    }

    public function swim()
    {
        echo '<br> Audi swim';
    }
}

$audi1 = new Audi;
$audi1->info();
$audi1->drive();
$audi1->swim();

var_dump($audi1 instanceof Audi); // Проверка является ли объект экземпляром класса или реализует интерфейс
var_dump($audi1 instanceof Car);
?>

<br><img src="Abstract_vs_Interface21.png">

<?php
echo "<br>";
require_once  "../templates/footer.php";
?>