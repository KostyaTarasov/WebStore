<?php

require __DIR__ . '/../vendor/autoload.php'; // Для загрузки пакетов, которые были скачаны composer-ом.

/*
 CLI позволяет запускать программы на PHP не через привычную нам клиент-серверную архитектуру, а как простые программы в командной строке.
 является точкой входа для консольных приложений
 фронт-контроллер для консольных команд
 будет создавать другие объекты и запускать весь процесс.
 В корне проекта в cmd прописать: php bin/cli.php
 */
//echo 2 + 2;

/* аргументы можем передать в скрипт, указав их после имени скрипта. чтобы получить к ним доступ из php-скрипта используется магическая переменная $argv. 
Она представляет собой массив, в котором нулевой элемент – это путь до скрипта, а все последующие – это его аргументы переданные консоли.
 В cmd: php bin/cli.php 3 4
 */
// var_dump($argv);

// unset($argv[0]); // удаляем 0 элемент массива - пути к файлу

// $sum = 0;
// foreach ($argv as $item) {
//     $sum += $item;
// }
// echo $sum;


// Команда для CLI: php  bin/cli.php Summator  -a=25 -b=10
// Создаёт экземпляр нужного класса и передаёт ему аргументы
try {
    unset($argv[0]);

    // Регистрируем функцию автозагрузки если не используем композер.
    //Если используется композер, то их удалить, так как за автозагрузку функций будет отвечать код, сгенерированный композером.
    // spl_autoload_register(function (string $className) {
    //     require_once __DIR__ . '/../src/' . $className . '.php';
    // });

    // Составляем полное имя класса, добавив нэймспейс
    $className = '\\MyProject\\Cli\\' . array_shift($argv);
    if (!class_exists($className)) {
        throw new \MyProject\Exceptions\CliException('Class "' . $className . '" not found');
    }

    # Подготавливаем список аргументов
    # парсер, который будет находить параметры (a, b) и их значения (25, 10)
    # если всё закомментировать кроме следующей части кода, то можно вызвать команду для наглядного теста через var_dump($params) ;в конце Команда CLI: php bin/cli.php -a=25 -b=10
    $params = [];
    foreach ($argv as $argument) {
        preg_match('/^-(.+)=(.+)$/', $argument, $matches);
        if (!empty($matches)) {
            $paramName = $matches[1];
            $paramValue = $matches[2];
            $params[$paramName] = $paramValue;
        }
    }
    // var_dump($params); // можем обращаться к элементам массива params, чтобы выяснить, были ли нам переданы какие-то аргументы или нет.

    // Создаём экземпляр класса, передав параметры и вызываем метод execute()
    $class = new $className($params);
    $class->execute();
} catch (\MyProject\Exceptions\CliException $e) {
    echo 'Error: ' . $e->getMessage();
}
